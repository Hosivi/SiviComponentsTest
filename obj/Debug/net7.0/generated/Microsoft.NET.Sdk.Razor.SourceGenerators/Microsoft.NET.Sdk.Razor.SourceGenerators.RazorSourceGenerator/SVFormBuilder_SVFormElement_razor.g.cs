#pragma checksum "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "f83af6ba9d43cbb6f359d816cfdebaabc4286bab5901e169d17f60694326854e"
// <auto-generated/>
#pragma warning disable 1591
namespace SiviComponents.SVFormBuilder
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.Base;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.Grid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.EventArgs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.DateComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.SVStepper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\_Imports.razor"
using SiviComponents.Timer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using Microsoft.AspNetCore.Components.Rendering;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.FormBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.SVDropDownSelect;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.SVFormBuilder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.DataGrid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using SiviComponents.Menu;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
using Utils;

#line default
#line hidden
#nullable disable
    public partial class SVFormElement<TModel> : global::Microsoft.AspNetCore.Components.ComponentBase, IFieldBuilder, IDisposable
    where TModel : class
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            global::__Blazor.SiviComponents.SVFormBuilder.SVFormElement.TypeInference.CreateCascadingValue_0(__builder, 0, 1, 
#nullable restore
#line 14 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
                       this

#line default
#line hidden
#nullable disable
            , 2, (__builder2) => {
#nullable restore
#line 15 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
     if (Input is not null)
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line (17,10)-(17,15) 25 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
__builder2.AddContent(3, Input);

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
              


    }

#line default
#line hidden
#nullable disable
            }
            );
        }
        #pragma warning restore 1998
#nullable restore
#line 24 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
       

    #region Propiedades

    [Parameter]
    public FieldConfiguration<TModel> FieldConfiguration { get; set; }

    [Parameter]
    public FormMode FormMode { get; set; }

    // [Parameter] public Action<SVFormElement<TModel>> WhenOnModelStateChanged { get; set; }
    // [Parameter] public EventCallback<FieldConfiguration<TModel>> WhenFieldChanged { get; set; }
    [Parameter]
    public TModel FormModel { get; set; }
    public bool ConditionalRendering = true;
    [Parameter]
    public EventCallback<TModel> ModelWasChanged { get; set; }

    [CascadingParameter(Name = "FormBuilder")]
    public SVFormBuilder<TModel> FormBuilder { get; set; }

    #endregion

    public IInput InputElementChild { get; set; }
    public string ModelProperty { get; set; }

    public delegate void OnModelChangedSinceSVFormElement(SVFormBuilder<TModel> formbuilder, SVFormElement<TModel> formElement);

    public event OnModelChangedSinceSVFormElement ModelChangedSinceSVFormElement;
    private RenderFragment? Input { get; set; }

    protected override void OnInitialized()
    {
        FormBuilder.OnModelWasChanged += FieldConfiguration.WhenOnModelChanged;
        if (FieldConfiguration.ModelChangedSinceSVFormElement is not null)
        {
            ModelChangedSinceSVFormElement += FieldConfiguration.ModelChangedSinceSVFormElement;
        }
        ConditionalRendering = FieldConfiguration.ConditionalRendering;
        ModelProperty = FieldConfiguration.ModelProperty;
        Input = FormFieldElement();
    }

    protected override void OnParametersSet()
    {
        ModelProperty = FieldConfiguration.ModelProperty;
        ConditionalRendering = FieldConfiguration.ConditionalRendering;
        Input = FormFieldElement();
        base.OnParametersSet();
    }

    private RenderFragment? FormFieldElement()
    {
        return builder =>
        {
            builder.OpenRegion(0);
            if (FieldConfiguration.FormControlType == FormControlType.Select)
            {
                CreateCustomFieldFragment(builder, FieldConfiguration);
                builder.CloseComponent();
            }
            if (FieldConfiguration.FormControlType == FormControlType.Input)
            {
                CreateInput(builder, FieldConfiguration);
                builder.CloseComponent();
            }

            if (FieldConfiguration.FormControlType == FormControlType.Button)
            {
                RenderControl(builder, FieldConfiguration);
            }
            builder.CloseRegion();
        };
    }

    private void RenderControl(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        builder.OpenElement(i, "div");
        builder.AddAttribute(i++, "class", "form-block text-center");
        builder.OpenComponent<Button>(i++);
        builder.AddAttribute(i++, "Type", f.ButtonType);
        builder.AddAttribute(i++, "ButtonText", f.Label);
        builder.AddAttribute(i++, "NavItem", f.NavItem);
        if (f.Onclick != null)
        {
            builder.AddAttribute(i++, "Onclick", EventCallback.Factory.Create<object>(this, x => { f.Onclick.Invoke(x); }));
        }
        if (f.OnButtonNavigate != null)
        {
            builder.AddAttribute(i++, "OnNavigate", EventCallback.Factory.Create<NavItem>(this, x => { f.OnButtonNavigate.Invoke(x); }));
        }
        builder.CloseComponent();
        builder.CloseElement();
    }
    private void CreateCustomFieldFragment(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        var propertyReference = FormModel.GetType().GetProperty(f.ModelProperty);
        var customProperty = f.GetType().GetProperty("CustomValue");
        var subProperty = f.GetType().GetProperty("CustomPropertyName")?.GetValue(f);
        var typeComponent = typeof(SVDropDownSelect<>).MakeGenericType(propertyReference.PropertyType);
        builder.OpenComponent(i, typeComponent);
        // builder.AddElementReferenceCapture(i, reference =>);
        var str = f.GetType().GetProperty("SelectStringDefaultValue")?.GetValue(f)?.ToString();
        if (str is not null)
        {
            builder.AddAttribute(i++, "DropDownPlaceHolder", str);
        }
        //builder.AddAttribute(i++, " DropDownPlaceHolder", "aaa");
        builder.AddAttribute(i++, "DropDownListData", f.GetType().GetProperty("CustomData")?.GetValue(f));
        builder.AddAttribute(i++, "PropertyName", f.GetType().GetProperty("CustomPropertyName").GetValue(f));
        builder.AddAttribute(i++, "Label", f.Label);
        builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
        builder.AddAttribute(i++, "Value", propertyReference.GetValue(FormModel));
        builder.AddAttribute(i++, "ValueActionChanged", f.GetType().GetProperty("CustomValueActionChanged")?.GetValue(f));
        builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
        var valueReference = propertyReference.GetValue(FormModel);
        if (propertyReference.PropertyType.IsEnum)
        {
            builder.AddAttribute(i++, "SelectedValue", valueReference);
        }
        else
        {
            if (valueReference?.GetType().GetProperty(f.ModelProperty)?.GetValue(valueReference) is not null)
            {
                builder.AddAttribute(i++, "SelectedValue", valueReference);
            }
            else
            {
                //builder.AddAttribute(i++, "DropDownDefaultValue", "Selecciona una opción");
            }
        }
        SwitchFormMode(i, builder);
    }

    private void SwitchFormMode(int i, RenderTreeBuilder builder)
    {
        switch (FormMode)
        {
            case FormMode.Read:
                builder.AddAttribute(i + 1, "IsDisabled", true);
                break;
            case FormMode.ReadWithOutSubmitButton:
                builder.AddAttribute(i + 1, "IsDisabled", true);
                break;
            case FormMode.Create:
            case FormMode.Edit:
                builder.AddAttribute(i + 1, "IsDisabled", false);
                break;
        }
    }

    private void CreateInput(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var property = FormModel.GetType().GetProperty(f.ModelProperty);
        int i = 0;
        switch (property.PropertyType.Name)
        {
            case "String":
                if (f.InputType.Equals(InputType.Password))
                {
                    builder.OpenComponent(i, typeof(SVInputPassword));
                }
                else
                {
                    builder.OpenComponent(i, typeof(SVInputText));
                }

                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "Placeholder", f.PlaceHolder);
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (string)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                builder.AddAttribute(i++, "WhenOnValueChanged", f.GetType().GetProperty("WhenOnValueChanged")?.GetValue(f));
                builder.AddAttribute(i++, "WhenOnValueChangedSinceForm", f.GetType().GetProperty("Action")?.GetValue(f));
                SwitchFormMode(i, builder);
                break;
            case "Int32":
            case "Int64":
                builder.OpenComponent(i, typeof(SVInputNumber));
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (int)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
            case "Decimal":
                builder.OpenComponent(i, typeof(SVInputNumber));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (decimal)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
            case "DateTime":
                builder.OpenComponent(i, typeof(SVDatePickerComponent));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (DateTime)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
        }
    }

    private void CreateFieldSet(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        var propTypeReference = LambdaExtensions.GetMemberType(f.ValueExpression);
        var typeComponent = typeof(SVFieldSet<>).MakeGenericType(propTypeReference);
        builder.AddAttribute(i++, "Attributes", f.Attributes);
        builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
    }

    public void WhenFieldWasChanged(string modelProperty, object value)
    {
        Console.WriteLine("esto es del formelement");
    }

    public void SubscribeInput(IInput inputElement)
    {
        InputElementChild = inputElement;
    }

    public void ChildWasRendered()
    {
        FormBuilder.SubscribeInput(this);
    }

    public void Refresh()
    {
        if (ModelChangedSinceSVFormElement is not null)
        {
            ModelChangedSinceSVFormElement.Invoke(FormBuilder, this);
        }
        Input = FormFieldElement();
        Console.WriteLine("Se refresco el fb y por tanto el input");

    }


#line default
#line hidden
#nullable disable
#nullable restore
#line 271 "E:\RepositoriosDesarrollo\Horelt\SiviComponents\SVFormBuilder\SVFormElement.razor"
       

    public void Dispose()
    {
        FormBuilder.OnModelWasChanged -= FieldConfiguration.WhenOnModelChanged;
        ModelChangedSinceSVFormElement -= FieldConfiguration.ModelChangedSinceSVFormElement;
    }


#line default
#line hidden
#nullable disable
    }
}
namespace __Blazor.SiviComponents.SVFormBuilder.SVFormElement
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateCascadingValue_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
