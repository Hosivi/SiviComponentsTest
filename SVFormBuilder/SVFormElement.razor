@using Microsoft.AspNetCore.Components.Rendering
@using SiviComponents.FormBuilder;
@using SiviComponents.Forms;
@using SiviComponents.SVDropDownSelect;
@using SiviComponents.SVFormBuilder;
@using Microsoft.AspNetCore.Components.Forms
@using SiviComponents.DataGrid
@using SiviComponents.Menu
@using Utils;
@implements IFieldBuilder;
@implements IDisposable

@typeparam TModel where TModel : class
<CascadingValue Value="this">
    @if (Input is not null)
    {
        @Input


    }
</CascadingValue>


@code {

    #region Propiedades

    [Parameter]
    public FieldConfiguration<TModel> FieldConfiguration { get; set; }

    [Parameter]
    public FormMode FormMode { get; set; }

    // [Parameter] public Action<SVFormElement<TModel>> WhenOnModelStateChanged { get; set; }
    // [Parameter] public EventCallback<FieldConfiguration<TModel>> WhenFieldChanged { get; set; }
    [Parameter]
    public TModel FormModel { get; set; }
    public bool ConditionalRendering = true;
    [Parameter]
    public EventCallback<TModel> ModelWasChanged { get; set; }

    [CascadingParameter(Name = "FormBuilder")]
    public SVFormBuilder<TModel> FormBuilder { get; set; }

    #endregion

    public IInput InputElementChild { get; set; }
    public string ModelProperty { get; set; }

    public delegate void OnModelChangedSinceSVFormElement(SVFormBuilder<TModel> formbuilder, SVFormElement<TModel> formElement);

    public event OnModelChangedSinceSVFormElement ModelChangedSinceSVFormElement;
    private RenderFragment? Input { get; set; }

    protected override void OnInitialized()
    {
        FormBuilder.OnModelWasChanged += FieldConfiguration.WhenOnModelChanged;
        if (FieldConfiguration.ModelChangedSinceSVFormElement is not null)
        {
            ModelChangedSinceSVFormElement += FieldConfiguration.ModelChangedSinceSVFormElement;
        }
        ConditionalRendering = FieldConfiguration.ConditionalRendering;
        ModelProperty = FieldConfiguration.ModelProperty;
        Input = FormFieldElement();
    }

    protected override void OnParametersSet()
    {
        ModelProperty = FieldConfiguration.ModelProperty;
        ConditionalRendering = FieldConfiguration.ConditionalRendering;
        Input = FormFieldElement();
        base.OnParametersSet();
    }

    private RenderFragment? FormFieldElement()
    {
        return builder =>
        {
            builder.OpenRegion(0);
            if (FieldConfiguration.FormControlType == FormControlType.Select)
            {
                CreateCustomFieldFragment(builder, FieldConfiguration);
                builder.CloseComponent();
            }
            if (FieldConfiguration.FormControlType == FormControlType.Input)
            {
                CreateInput(builder, FieldConfiguration);
                builder.CloseComponent();
            }

            if (FieldConfiguration.FormControlType == FormControlType.Button)
            {
                RenderControl(builder, FieldConfiguration);
            }
            builder.CloseRegion();
        };
    }

    private void RenderControl(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        builder.OpenElement(i, "div");
        builder.AddAttribute(i++, "class", "form-block text-center");
        builder.OpenComponent<Button>(i++);
        builder.AddAttribute(i++, "Type", f.ButtonType);
        builder.AddAttribute(i++, "ButtonText", f.Label);
        builder.AddAttribute(i++, "NavItem", f.NavItem);
        if (f.Onclick != null)
        {
            builder.AddAttribute(i++, "Onclick", EventCallback.Factory.Create<object>(this, x => { f.Onclick.Invoke(x); }));
        }
        if (f.OnButtonNavigate != null)
        {
            builder.AddAttribute(i++, "OnNavigate", EventCallback.Factory.Create<NavItem>(this, x => { f.OnButtonNavigate.Invoke(x); }));
        }
        builder.CloseComponent();
        builder.CloseElement();
    }
    private void CreateCustomFieldFragment(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        var propertyReference = FormModel.GetType().GetProperty(f.ModelProperty);
        var customProperty = f.GetType().GetProperty("CustomValue");
        var subProperty = f.GetType().GetProperty("CustomPropertyName")?.GetValue(f);
        var typeComponent = typeof(SVDropDownSelect<>).MakeGenericType(propertyReference.PropertyType);
        builder.OpenComponent(i, typeComponent);
        // builder.AddElementReferenceCapture(i, reference =>);
        var str = f.GetType().GetProperty("SelectStringDefaultValue")?.GetValue(f)?.ToString();
        if (str is not null)
        {
            builder.AddAttribute(i++, "DropDownPlaceHolder", str);
        }
        //builder.AddAttribute(i++, " DropDownPlaceHolder", "aaa");
        builder.AddAttribute(i++, "DropDownListData", f.GetType().GetProperty("CustomData")?.GetValue(f));
        builder.AddAttribute(i++, "PropertyName", f.GetType().GetProperty("CustomPropertyName").GetValue(f));
        builder.AddAttribute(i++, "Label", f.Label);
        builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
        builder.AddAttribute(i++, "Value", propertyReference.GetValue(FormModel));
        builder.AddAttribute(i++, "ValueActionChanged", f.GetType().GetProperty("CustomValueActionChanged")?.GetValue(f));
        builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
        var valueReference = propertyReference.GetValue(FormModel);
        if (propertyReference.PropertyType.IsEnum)
        {
            builder.AddAttribute(i++, "SelectedValue", valueReference);
        }
        else
        {
            if (valueReference?.GetType().GetProperty(f.ModelProperty)?.GetValue(valueReference) is not null)
            {
                builder.AddAttribute(i++, "SelectedValue", valueReference);
            }
            else
            {
                //builder.AddAttribute(i++, "DropDownDefaultValue", "Selecciona una opción");
            }
        }
        SwitchFormMode(i, builder);
    }

    private void SwitchFormMode(int i, RenderTreeBuilder builder)
    {
        switch (FormMode)
        {
            case FormMode.Read:
                builder.AddAttribute(i + 1, "IsDisabled", true);
                break;
            case FormMode.ReadWithOutSubmitButton:
                builder.AddAttribute(i + 1, "IsDisabled", true);
                break;
            case FormMode.Create:
            case FormMode.Edit:
                builder.AddAttribute(i + 1, "IsDisabled", false);
                break;
        }
    }

    private void CreateInput(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var property = FormModel.GetType().GetProperty(f.ModelProperty);
        int i = 0;
        switch (property.PropertyType.Name)
        {
            case "String":
                if (f.InputType.Equals(InputType.Password))
                {
                    builder.OpenComponent(i, typeof(SVInputPassword));
                }
                else
                {
                    builder.OpenComponent(i, typeof(SVInputText));
                }

                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "Placeholder", f.PlaceHolder);
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (string)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                builder.AddAttribute(i++, "WhenOnValueChanged", f.GetType().GetProperty("WhenOnValueChanged")?.GetValue(f));
                builder.AddAttribute(i++, "WhenOnValueChangedSinceForm", f.GetType().GetProperty("Action")?.GetValue(f));
                SwitchFormMode(i, builder);
                break;
            case "Int32":
            case "Int64":
                builder.OpenComponent(i, typeof(SVInputNumber));
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (int)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
            case "Decimal":
                builder.OpenComponent(i, typeof(SVInputNumber));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (decimal)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
            case "DateTime":
                builder.OpenComponent(i, typeof(SVDatePickerComponent));
                builder.AddAttribute(i++, "Label", f.Label);
                builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
                builder.AddAttribute(i++, "ModelProperty", f.GetType().GetProperty("ModelProperty")?.GetValue(f));
                builder.AddAttribute(i++, "ValueChanged", EventCallback.Factory.CreateInferred(this, s => property.SetValue(FormModel, s), (DateTime)property.GetValue(FormModel)));
                builder.AddAttribute(i++, "Value", property.GetValue(FormModel));
                SwitchFormMode(i, builder);
                break;
        }
    }

    private void CreateFieldSet(RenderTreeBuilder builder, FieldConfiguration<TModel> f)
    {
        var i = 0;
        var propTypeReference = LambdaExtensions.GetMemberType(f.ValueExpression);
        var typeComponent = typeof(SVFieldSet<>).MakeGenericType(propTypeReference);
        builder.AddAttribute(i++, "Attributes", f.Attributes);
        builder.AddAttribute(i++, "ConditionalRendering", f.ConditionalRendering);
    }

    public void WhenFieldWasChanged(string modelProperty, object value)
    {
        Console.WriteLine("esto es del formelement");
    }

    public void SubscribeInput(IInput inputElement)
    {
        InputElementChild = inputElement;
    }

    public void ChildWasRendered()
    {
        FormBuilder.SubscribeInput(this);
    }

    public void Refresh()
    {
        if (ModelChangedSinceSVFormElement is not null)
        {
            ModelChangedSinceSVFormElement.Invoke(FormBuilder, this);
        }
        Input = FormFieldElement();
        Console.WriteLine("Se refresco el fb y por tanto el input");

    }

}

@code {

    public void Dispose()
    {
        FormBuilder.OnModelWasChanged -= FieldConfiguration.WhenOnModelChanged;
        ModelChangedSinceSVFormElement -= FieldConfiguration.ModelChangedSinceSVFormElement;
    }

}